Table of Contents

+
-

1
Add Continuous Integration

2
Note: Important Security Information

3
Initialize Development Environment

4
Exercise 1: Pick Up the First Story

5
Exercise 2: Create a Workflow

6
Exercise 3: Create a Job

7
Exercise 4: Define Required Services

8
Exercise 5: Check Out Code and Install Dependencies

9
Exercise 6: Add Linting

10
Exercise 7: Add Unit Testing

11
Exercise 8: Create a Badge

12
Exercise 9: Make a Pull Request

13
Exercise 10: View the Workflow Run

14
Conclusion
Exercise 7: Add Unit Testing
To satisfy the testing requirements, you will use Nose in this step to unit test the source code. Nose is configured via the included setup.cfg file to automatically include the flags --with-spec and --spec-color so that red-green-refactor is meaningful. If you are in a command shell that supports colors, passing tests will be green and failing tests will be red.

Nose is also configured to automatically run the coverage tool, and you should see a percentage of coverage report at the end of your tests.

Reference
You can use the following commands to run the nosetests in your workflow steps.

1
nosetests -v --with-spec --spec-color --with-coverage --cover-package=service
Copied!
Note: You should run these commands on your code before you add them to your workflow to ensure that your code passes the tests. You can use the make test command to do this.

Your Task
Add a new step named Run unit tests with Nose after the Lint with flake8 step that runs the nosetests commands from the above reference.

Click here for a hint.
Use the env: tag to add an environment variable named DATABASE_URI that will configure the tests to use the PostgreSQL database that you created in the service: section.

Click here for a hint.
Validate
Your test step definition should look like this:

Click here to check your answer.
1
2
3
4
5
6
7
8
9
10
11
12
jobs:
  build:
    services:
    # ...
    steps:
      # ...previous steps here
      - name: Run unit tests with nose
        run: nosetests
        env:
          DATABASE_URI: "postgresql://postgres:pgs3cr3t@postgres:5432/testdb"
Copied!
That completes your workflow definition.

Check your final work
Try and run the workflow that you put together yourself. If anything goes wrong, here is the complete solution so that you can check how it may differ from yours.

Click here to check the complete solution.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
name: CI Build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    container: python:3.9-slim
    services:
      postgres:
        image: postgres:alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: pgs3cr3t
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 service --count --max-complexity=10 --max-line-length=127 --statistics
      - name: Run unit tests with nose
        run: nosetests
        env:
          DATABASE_URI: "postgresql://postgres:pgs3cr3t@postgres:5432/testdb"
Copied!
Previous
Next
